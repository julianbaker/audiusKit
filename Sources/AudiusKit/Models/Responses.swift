import Foundation

/// Time range for trending tracks
public enum TimeRange: String, Codable {
  case week = "week"
  case month = "month"
  case year = "year"
  case allTime = "allTime"
}

/// Represents access control for playlists
public struct Access: Codable, Hashable {
  public let stream: Bool
  public let download: Bool
}

/// Represents playlist content item
public struct PlaylistContent: Codable, Hashable {
  public let metadataTimestamp: Int
  public let timestamp: Int
  public let trackId: String

  enum CodingKeys: String, CodingKey {
    case metadataTimestamp = "metadata_timestamp"
    case timestamp
    case trackId = "track_id"
  }
}

/// Represents a playlist on Audius
public struct Playlist: Codable, Identifiable, Hashable {
  public let id: String
  public let playlistName: String
  public let description: String?
  public let permalink: String?
  public let isAlbum: Bool?
  public let isImageAutogenerated: Bool?
  public let artwork: Track.Artwork?
  public let playlistContents: [PlaylistContent]?
  public let repostCount: Int?
  public let favoriteCount: Int?
  public let totalPlayCount: Int?
  public let trackCount: Int?
  public let user: Track.User?
  public let ddexApp: String?
  public let access: Access?
  public let upc: String?

  enum CodingKeys: String, CodingKey {
    case id
    case playlistName = "playlist_name"
    case description
    case permalink
    case isAlbum = "is_album"
    case isImageAutogenerated = "is_image_autogenerated"
    case artwork
    case playlistContents = "playlist_contents"
    case repostCount = "repost_count"
    case favoriteCount = "favorite_count"
    case totalPlayCount = "total_play_count"
    case trackCount = "track_count"
    case user
    case ddexApp = "ddex_app"
    case access
    case upc
  }
}

/// Response structure for track-related API calls
public struct TracksResponse: Codable {
  public let data: [Track]

  public init(data: [Track]) {
    self.data = data
  }
}

/// Response structure for playlist-related API calls
public struct PlaylistsResponse: Codable {
  public let data: [Playlist]

  public init(data: [Playlist]) {
    self.data = data
  }
}

/// Response structure for single playlist API calls
public struct PlaylistResponse: Codable {
  public let data: Playlist

  public init(data: Playlist) {
    self.data = data
  }
}

/// Response structure for user-related API calls
public struct UsersResponse: Codable {
  public let data: [Track.User]

  public init(data: [Track.User]) {
    self.data = data
  }
}

/// Response structure for single user API calls
public struct UserResponse: Codable {
  public let data: Track.User

  public init(data: Track.User) {
    self.data = data
  }
}

/// Represents an event from the Audius API
public struct AudiusEvent: Codable, Hashable, Identifiable {
  public let id: String
  public let eventType: String
  public let userId: String?
  public let entityType: String?
  public let entityId: String?
  public let endDate: String?
  public let isDeleted: Bool?
  public let createdAt: String?
  public let updatedAt: String?
  public let eventData: String?

  enum CodingKeys: String, CodingKey {
    case id = "event_id"
    case eventType = "event_type"
    case userId = "user_id"
    case entityType = "entity_type"
    case entityId = "entity_id"
    case endDate = "end_date"
    case isDeleted = "is_deleted"
    case createdAt = "created_at"
    case updatedAt = "updated_at"
    case eventData = "event_data"
  }
}

/// Response structure for events API calls
public struct EventsResponse: Codable {
  public let data: [AudiusEvent]
}

/// Response structure for best selling explore API calls
public struct BestSellingResponse: Codable {
  public let data: [Track]
}
